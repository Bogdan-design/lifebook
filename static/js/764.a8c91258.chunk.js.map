{"version":3,"file":"static/js/764.a8c91258.chunk.js","mappings":"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","sources":["webpack://social-network/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/Contacts.tsx","components/Profile/ProfileInfo/ProfileData.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://social-network/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://social-network/./src/components/Profile/MyPosts/Posts/Post.module.css?5aca","components/Profile/MyPosts/Posts/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__bLvAR\",\"mainPhoto\":\"ProfileInfo_mainPhoto__TjLOw\",\"contact\":\"ProfileInfo_contact__R+xrw\",\"error\":\"ProfileInfo_error__ifpLg\"};","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\n\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\n\r\nexport const ProfileStatus = (props: ProfileStatusPropsType) => {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [status, setStatus] = useState<string>(props.status)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status]);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deActivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n                <div>\r\n                    <b>Status:</b><span onDoubleClick={activateEditMode}>{props.status || 'No status'}</span>\r\n                </div>\r\n            }\r\n            {editMode &&\r\n                <div>\r\n                    <b>Status:</b><input onChange={onStatusChange} autoFocus={true} onBlur={deActivateEditMode} value={status}/>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","import {ContactsType, ProfileContainerType} from \"../ProfileContainer\";\r\nimport React from \"react\";\r\nimport s from \"./ProfileInfo.module.css\"\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Element} from \"../../../components/common/FormsControls/FormsControls\";\r\n\r\ntype PropsDataForm = {\r\n    profile: ProfileContainerType\r\n}\r\n\r\nconst ProfileDataForm: React.FC<InjectedFormProps<FormType, PropsDataForm> & PropsDataForm>\r\n    = ({profile, handleSubmit,error}) => {\r\n    debugger\r\n    console.log(error)\r\n\r\n    return <form onSubmit={handleSubmit}>\r\n        <div>\r\n            <button type={\"submit\"}>Save</button>\r\n            {error && <div className={s.error}>{error}</div>}\r\n        </div>\r\n        <div>\r\n            <b>Full name:</b><Field as='input' placeholder={'Full name'} name={'fullName'} component={Element}\r\n                                    validate={[]}/>\r\n        </div>\r\n        <div>\r\n            <b>Looking for a job:</b>\r\n            <Field as='input' type={'checkbox'} name={'lookingForAJob'} component={Element}/>\r\n        </div>\r\n        <div>\r\n            <b>My professional skills:</b>\r\n            <Field as='textarea' name={'lookingForAJobDescription'} component={Element}/>\r\n        </div>\r\n        <div>\r\n            <b>About me:</b><Field as='textarea' name={'aboutMe'} component={Element}/>\r\n        </div>\r\n        <div>\r\n            <b>Contacts:</b>{Object.keys(profile.contacts).map(key => {\r\n            return <div key={key} className={s.contact}>\r\n                <b>{key}:</b>\r\n                <Field as='input' placeholder={key} name={'contacts.'+key} component={Element}/>\r\n            </div>\r\n        })}\r\n        </div>\r\n\r\n    </form>\r\n}\r\n\r\nexport const ProfileDataReduxForm = reduxForm<FormType, PropsDataForm>({\r\n    form: 'editProfile'\r\n})(ProfileDataForm)\r\n\r\n\r\nexport type FormType = {\r\n    fullName: string\r\n    lookingForAJob:boolean\r\n    lookingForAJobDescription:string\r\n    aboutMe:string\r\n    contacts:ContactsType\r\n}","import s from \"./ProfileInfo.module.css\";\r\nimport React from \"react\";\r\n\r\ntype ContactPropsType = {\r\n    contactTitle: string\r\n    contactValue:string\r\n}\r\n\r\nexport const Contact: React.FC<ContactPropsType> = ({contactTitle, contactValue}) => {\r\n    return <div className={s.contact}>\r\n        <b>{contactTitle}:</b>{contactValue}\r\n    </div>\r\n}","import {ProfileContainerType} from \"../../Profile/ProfileContainer\";\r\nimport {Contact} from \"./Contacts\";\r\nimport React from \"react\";\r\n\r\nexport const ProfileData = (props:{profile: ProfileContainerType,isOwner:boolean, goToEditMode:()=>void }) => {\r\n    const {profile,isOwner,goToEditMode}=props\r\n    return <div>\r\n        {isOwner && <div>\r\n            <button onClick={goToEditMode}>Edite</button>\r\n        </div>}\r\n        <div>\r\n            <b>Full name:</b>{profile.fullName && profile.fullName}\r\n        </div>\r\n        <div>\r\n            <b>Looking for a job:</b>{profile.lookingForAJob ? ' Yes' : ' No'}\r\n        </div>\r\n        {profile.lookingForAJob && <div><b>My professional skills:</b>{profile.lookingForAJobDescription}</div>}\r\n        <div>\r\n            <b>About me:</b>{profile.aboutMe}\r\n        </div>\r\n        <div>\r\n            <b>Contacts:</b>{Object.keys(profile.contacts).map(key => {\r\n            return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key]}/>\r\n        })}\r\n        </div>\r\n    </div>\r\n}","import React, {ChangeEvent, useState} from \"react\";\r\nimport s from \"./ProfileInfo.module.css\"\r\nimport {Preloader} from \"../../common/Preloader/Preloader\";\r\nimport {ProfileContainerType} from \"../ProfileContainer\";\r\nimport {ProfileStatus} from \"./ProfileStatus\";\r\nimport usersPhoto from \"../../../assets/imeges/avatar.jpg\";\r\nimport {FormType, ProfileDataReduxForm} from \"./ProfileDataForm\";\r\nimport {ProfileData} from \"./ProfileData\";\r\n\r\ntype ProfileInfoPropsType = {\r\n    isOwner: boolean\r\n    profile: ProfileContainerType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (newPhoto: File) => void\r\n    saveProfile:(data: FormType) => Promise<{code: number}>\r\n}\r\n\r\n\r\nexport const ProfileInfo: React.FC<ProfileInfoPropsType> = ({profile, status, updateStatus, isOwner, savePhoto, saveProfile}) => {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files && e.target.files.length) {\r\n            savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onSubmit = (formData: FormType) => {\r\n\r\n        saveProfile(formData).then(res => {\r\n            if(res.code === 0) {\r\n                setEditMode(false)\r\n            }\r\n        })\r\n    }\r\n\r\n    const openForm = () => setEditMode(true);\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.descriptionBlock}>\r\n                <img src={profile.photos.large || usersPhoto} alt={'profile photo'} className={s.mainPhoto}/>\r\n                {isOwner && <input type={'file'} onChange={onMainPhotoSelected}/> }\r\n                {editMode ? <ProfileDataReduxForm initialValues={profile} profile={profile} onSubmit={onSubmit}/> :\r\n                    <ProfileData profile={profile} isOwner goToEditMode={openForm}/>}\r\n                <ProfileStatus status={status} updateStatus={updateStatus}/>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\n\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__ASxTH\",\"posts\":\"MyPosts_posts__QQOD7\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__Rp5N4\"};","import React from \"react\";\r\nimport s from \"./Post.module.css\"\r\n\r\ntype PostsPropsType = {\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nexport const Post = (props: PostsPropsType) => {\r\n    return (\r\n        <div className={s.content}>\r\n            <div className={s.item}>\r\n                <img alt={''}\r\n                    src=\"https://cdn.vox-cdn.com/thumbor/W6YyHkPAoXd8VGz2OGMjqkWWM7E=/0x0:2370x1574/1400x1400/filters:focal(1185x787:1186x788)/cdn.vox-cdn.com/uploads/chorus_asset/file/20103707/Screen_Shot_2020_07_21_at_9.38.25_AM.png\"/>\r\n                <span>{props.message}</span>\r\n                <div>\r\n                    <span>{props.likesCount}</span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport s from \"./MyPosts.module.css\"\r\nimport {Post} from \"./Posts/Post\";\r\nimport {PostsType} from \"redux/state\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"utils/validators/validators\";\r\nimport {Element} from \"components/common/FormsControls/FormsControls\";\r\n\r\ntype MyPostsPropsType = {\r\n    addPost: (value:string) => void\r\n    posts: PostsType[]\r\n\r\n}\r\n\r\nexport const  MyPosts= React.memo((props: MyPostsPropsType) =>{\r\n\r\n    const postsElements = props.posts.map((p) =>\r\n        <Post key={p.id} message={p.message} likesCount={p.likesCount}/>)\r\n\r\n    const onAddPost = (value: PostFormType) => {\r\n        props.addPost(value.post)\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <div>\r\n                <h3>My post</h3>\r\n                <MyPostReduxForm onSubmit={onAddPost}/>\r\n                <div className={s.posts}>\r\n                    {postsElements}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\ntype PostFormType = {\r\n    post:string\r\n}\r\nconst maxLength10 = maxLengthCreator(10)\r\nconst MyPostForm: React.FC<InjectedFormProps<PostFormType>> = (props) => {\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field as='textarea' component={Element} placeholder={'Post'} name={'post'} validate={[required,maxLength10]}/>\r\n            <div>\r\n                <button type={'submit'}>Add Post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst MyPostReduxForm = reduxForm<PostFormType>({\r\n    form: 'post'\r\n})(MyPostForm)","import {addPostAC, InitialStateType} from \"redux/profileReducer\";\r\nimport {MyPosts} from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"redux/redaxStore\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\ntype MapStatePropsType = InitialStateType\r\n\r\n\r\ntype MapDispatchPropsType = {\r\n    addPost: (newPost: string) => void\r\n\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\r\n    return {\r\n        addPost: (newPost: string) => {\r\n            dispatch(addPostAC(newPost))\r\n        }\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)","import React from \"react\";\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileContainerType} from \"components/Profile/ProfileContainer\";\r\nimport {FormType} from \"components/Profile/ProfileInfo/ProfileDataForm\";\r\n\r\ntype ProfilePropsType ={\r\n    isOwner:boolean\r\n    profile: ProfileContainerType | null\r\n    status: string\r\n    updateStatus: (status:string)=>void\r\n    savePhoto: (newPhoto: File) => void\r\n    saveProfile:(data: FormType) => Promise<{code: number}>\r\n}\r\n\r\n\r\nexport const Profile: React.FC<ProfilePropsType> = ({isOwner,profile,updateStatus,status,savePhoto,saveProfile}) => {\r\n\r\n\r\n    return (\r\n        <div>\r\n            <ProfileInfo isOwner={isOwner}\r\n                         profile={profile}\r\n                         status={status}\r\n                         updateStatus={updateStatus}\r\n                         savePhoto={savePhoto}\r\n                         saveProfile={saveProfile}\r\n            />\r\n            <MyPostsContainer  />\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport {Profile} from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"redux/redaxStore\";\r\nimport {getStatus, getUserProfile, updateStatus, savePhoto, saveProfile} from \"redux/profileReducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\nimport {withAuthRedirect} from \"hoc/withAuthRedirect\";\r\nimport {UserPhotosType} from \"api/api\";\r\nimport {FormType} from \"components/Profile/ProfileInfo/ProfileDataForm\";\r\n\r\n\r\nexport type ContactsType = {\r\n    [key: string]: string\r\n    facebook: string\r\n    website: string\r\n    vk: string\r\n    twitter: string\r\n    instagram: string\r\n    youtube: string\r\n    github: string\r\n    mainLink: string\r\n\r\n}\r\n\r\nexport type ProfileContainerType = {\r\n    aboutMe: string\r\n    contacts: ContactsType\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string,\r\n    fullName: string\r\n    id: number\r\n    photos: UserPhotosType\r\n}\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\ntype MapDispatchPropsType = {\r\n    getUserProfile: (id: number | null) => void\r\n    getStatus: (id: number) => void\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (newPhoto: File | null) => void\r\n    saveProfile:(data: FormType) => Promise<{code: number}>\r\n}\r\ntype MapStatePropsType = {\r\n    profile: ProfileContainerType | null,\r\n    status: string\r\n    authorizedUserId: number | null\r\n}\r\ntype OwnPropsType = MapDispatchPropsType & MapStatePropsType\r\ntype PropsType = RouteComponentProps<PathParamsType> & OwnPropsType\r\n\r\n\r\nclass ProfileContainer extends React.Component<PropsType, OwnPropsType> {\r\n    refreshProfile = () => {\r\n        let userId = Number(this.props.match.params.userId)\r\n        if (!userId && this.props.authorizedUserId) {\r\n            userId = this.props.authorizedUserId\r\n            if (!userId) {\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps:Readonly<PropsType>) {\r\n        if(this.props.match.params.userId !== prevProps.match.params.userId ) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <Profile  {...this.props}\r\n                      saveProfile={this.props.saveProfile}\r\n                      isOwner={!this.props.match.params.userId}\r\n                      profile={this.props.profile}\r\n                      status={this.props.status}\r\n                      updateStatus={this.props.updateStatus}\r\n                      savePhoto={this.props.savePhoto}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.id,\r\n})\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile}),\r\n    withAuthRedirect,\r\n    withRouter,\r\n)(ProfileContainer)\r\n"],"names":["ProfileStatus","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","ProfileDataReduxForm","reduxForm","form","profile","handleSubmit","error","console","log","onSubmit","type","className","s","Field","as","placeholder","name","component","Element","validate","Object","keys","contacts","map","key","Contact","contactTitle","contactValue","ProfileData","isOwner","goToEditMode","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","ProfileInfo","savePhoto","saveProfile","Preloader","src","photos","large","usersPhoto","alt","target","files","length","initialValues","formData","then","res","code","Post","message","likesCount","MyPosts","React","postsElements","posts","p","id","MyPostReduxForm","addPost","post","maxLength10","maxLengthCreator","required","MyPostsContainer","connect","state","profilePage","dispatch","newPost","addPostAC","Profile","ProfileContainer","refreshProfile","userId","Number","match","params","authorizedUserId","history","push","getUserProfile","getStatus","this","prevProps","compose","auth","withAuthRedirect","withRouter"],"sourceRoot":""}