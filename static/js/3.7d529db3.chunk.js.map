{"version":3,"file":"static/js/3.7d529db3.chunk.js","mappings":"8KACA,G,QAA0B,0BAA1B,EAAkE,8BAAlE,EAAyG,wBAAzG,EAA0I,wBAA1I,EAA6K,0BAA7K,EAAiN,yB,mBCQpMA,EAAa,SAACC,GAEvB,IAAMC,EAAO,YAAcD,EAAME,GAEjC,OACI,gBAAKC,UAAWC,EAAW,IAAMA,EAAjC,UACI,SAAC,KAAD,CAASC,GAAIJ,EAAb,SAAoBD,EAAMM,UCRzBC,EAAU,SAACP,GAEpB,OACI,0BAEI,gBAAKG,UAAWC,EAAhB,SAA4BJ,EAAMQ,a,uCCiCxCC,GAAcC,EAAAA,EAAAA,GAAiB,IAa/BC,GAAsBC,EAAAA,EAAAA,GAA+B,CACvDC,KAAK,wBADmBD,EAX4C,SAACZ,GACrE,OACI,kBAAMc,SAAUd,EAAMe,aAAtB,WACI,SAACC,EAAA,EAAD,CAAOC,GAAG,WAAWC,UAAWC,EAAAA,EAASC,YAAa,oBAAqBd,KAAM,iBAAkBe,SAAU,CAACC,EAAAA,EAASb,MACvH,0BACI,mBAAQc,KAAM,SAAd,0B,uCCrBhB,GAAeC,EAAAA,EAAAA,KACXC,EAAAA,EAAAA,KAfoB,SAACC,GACrB,MAAO,CACHC,YAAaD,EAAMC,gBAIA,SAACC,GACxB,MAAO,CACHC,WAAY,SAACC,GACTF,GAASG,EAAAA,EAAAA,GAAaD,SAO9BE,EAAAA,GACAC,EAAAA,EAHJ,EDfuB,SAACjC,GAEpB,IAAMkC,EAAkBlC,EAAM2B,YAAYQ,QAAQC,KAAI,SAAAC,GAAC,OAAI,SAACtC,EAAD,CAAYO,KAAM+B,EAAE/B,KAAiBJ,GAAImC,EAAEnC,IAAZmC,EAAEnC,OACtFoC,EAAmBtC,EAAM2B,YAAYY,SAASH,KAAI,SAAAI,GAAC,OAAI,SAACjC,EAAD,CAASC,QAASgC,EAAEhC,SAAcgC,EAAEtC,OASjG,OACI,iBAAKC,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,SACK8B,KAEL,gBAAK/B,UAAWC,EAAhB,UACI,yBAAMkC,OAEV,SAAC3B,EAAD,CAAqBG,SAdP,SAAC2B,GACnBzC,EAAM6B,WAAWY,EAAMX","sources":["webpack://social-network/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__BB1qu\",\"dialogsItems\":\"Dialogs_dialogsItems__8+FdD\",\"dialog\":\"Dialogs_dialog__jVVwe\",\"active\":\"Dialogs_active__c925e\",\"messages\":\"Dialogs_messages__WctAz\",\"message\":\"Dialogs_message__lxVC8\"};","import React from \"react\";\r\nimport s from \"./../Dialogs.module.css\"\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype DialogsType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nexport const DialogItem = (props:DialogsType) => {\r\n\r\n    const path = \"/dialogs/\" + props.id\r\n\r\n    return (\r\n        <div className={s.dialog + \" \" + s.active}>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import React from \"react\";\r\nimport s from \"./../Dialogs.module.css\"\r\n\r\ntype MessagePropsType={\r\n    message:string\r\n}\r\n\r\nexport const Message = (props:MessagePropsType) => {\r\n\r\n    return (\r\n        <div>\r\n\r\n            <div className={s.message}>{props.message}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import React from \"react\";\r\nimport s from \"./Dialogs.module.css\"\r\nimport {DialogItem} from \"./DialogItem/DialogItem\";\r\nimport {Message} from \"./Message/Message\";\r\nimport {InitialStateType} from \"redux/dialogsReducer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Element} from \"components/common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"utils/validators/validators\";\r\n\r\ntype DialogsPropsType = {\r\n    dialogsPage:InitialStateType\r\n    isAuth: boolean\r\n    addMessage:(value:string)=>void\r\n\r\n}\r\n\r\nexport const Dialogs = (props: DialogsPropsType) => {\r\n\r\n    const dialogsElements = props.dialogsPage.dialogs.map(d => <DialogItem name={d.name} key={d.id} id={d.id}/>);\r\n    const messagesElements = props.dialogsPage.messages.map(m => <Message message={m.message} key={m.id}/>)\r\n\r\n\r\n    const addNewMessage = (value:MessageFormDataType) =>{\r\n        props.addMessage(value.newMessageBody)\r\n    }\r\n\r\n   // if (!props.isAuth) return <Redirect to={'/login'}/>\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{messagesElements}</div>\r\n            </div>\r\n            <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype MessageFormDataType = {\r\n    newMessageBody: string\r\n}\r\n\r\nconst maxLength10 = maxLengthCreator(30)\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<MessageFormDataType>> =(props)=>{\r\n    return(\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field as='textarea' component={Element} placeholder={\"Enter you message\"} name={'newMessageBody'} validate={[required,maxLength10]}/>\r\n            <div>\r\n                <button type={'submit'}>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm<MessageFormDataType>({\r\n    form:'dialogAddMessageForm'\r\n})(AddMessageForm)","import React from \"react\";\r\nimport {addMessageAC, InitialStateType} from \"redux/dialogsReducer\";\r\nimport {Dialogs} from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"redux/redaxStore\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {withAuthRedirect} from \"hoc/withAuthRedirect\";\r\nimport {withRouter} from \"react-router-dom\";\r\n\r\ntype MapStatePropsType = {\r\n    dialogsPage: InitialStateType\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    addMessage: (newMessageBody:string) => void\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\r\n    return {\r\n        addMessage: (newMessageBody:string) => {\r\n            dispatch(addMessageAC(newMessageBody))\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(Dialogs)\r\n\r\n"],"names":["DialogItem","props","path","id","className","s","to","name","Message","message","maxLength10","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","as","component","Element","placeholder","validate","required","type","compose","connect","state","dialogsPage","dispatch","addMessage","newMessageBody","addMessageAC","withRouter","withAuthRedirect","dialogsElements","dialogs","map","d","messagesElements","messages","m","value"],"sourceRoot":""}